{
  "contractName": "IGuard",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        },
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "sig",
          "type": "bytes4"
        }
      ],
      "name": "canCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.10+commit.5a6ea5b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"canCall(address,address,bytes4)\":{\"params\":{\"dst\":\"The context (called contract) address.\",\"sig\":\"The function selector of the function being called on `dst`.\",\"src\":\"The source (caller) address.\"},\"return\":\"True, if the call is allowed, false otherwise\"}}},\"userdoc\":{\"methods\":{\"canCall(address,address,bytes4)\":{\"notice\":\"canCall MUST return true if `src` can call `sig` in the context of the `dst` contract.\"}},\"notice\":\"Interface for a Guard contract. Guard implementations MUST return true if the given address can perform a call on a function (as determined by the given callcode) in the given context (as determined by the `dst` contract address). The authentication process and logic are left to the actual implementation.\"}},\"settings\":{\"compilationTarget\":{\"/home/ohm/dev/dsb/smart-contracts/contracts/interfaces/IGuard.sol\":\"IGuard\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/ohm/dev/dsb/smart-contracts/contracts/interfaces/IGuard.sol\":{\"keccak256\":\"0x685e7d50a6c5ce54589a403c03e921e2a79f215b0da5cc8b5c63cee00bf325a1\",\"urls\":[\"bzzr://56d5cf8533ac7f44ff829771201d7ff17b03aea5e70231a1a1eee11c3f127cf5\",\"dweb:/ipfs/QmUjgpVXK5ZnS6MrTdChUVdEGhq67aZgUjRkxHN2MvXAcB\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity ^0.5.10;\n\n/**\n * @notice Interface for a Guard contract. Guard implementations MUST return true if the given\n * address can perform a call on a function (as determined by the given callcode) in the given\n * context (as determined by the `dst` contract address). The authentication process and logic are\n * left to the actual implementation.\n */\ninterface IGuard {\n\n    /**\n     * @notice canCall MUST return true if `src` can call `sig` in the context of\n     * the `dst` contract.\n     * @param src The source (caller) address.\n     * @param dst The context (called contract) address.\n     * @param sig The function selector of the function being called on `dst`.\n     * @return True, if the call is allowed, false otherwise\n     */\n    function canCall(address src, address dst, bytes4 sig)\n        external\n        view\n        returns (bool);\n}\n\n",
  "sourcePath": "/home/ohm/dev/dsb/smart-contracts/contracts/interfaces/IGuard.sol",
  "ast": {
    "absolutePath": "/home/ohm/dev/dsb/smart-contracts/contracts/interfaces/IGuard.sol",
    "exportedSymbols": {
      "IGuard": [
        1252
      ]
    },
    "id": 1253,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1240,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": "@notice Interface for a Guard contract. Guard implementations MUST return true if the given\naddress can perform a call on a function (as determined by the given callcode) in the given\ncontext (as determined by the `dst` contract address). The authentication process and logic are\nleft to the actual implementation.",
        "fullyImplemented": false,
        "id": 1252,
        "linearizedBaseContracts": [
          1252
        ],
        "name": "IGuard",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice canCall MUST return true if `src` can call `sig` in the context of\nthe `dst` contract.\n@param src The source (caller) address.\n@param dst The context (called contract) address.\n@param sig The function selector of the function being called on `dst`.\n@return True, if the call is allowed, false otherwise",
            "id": 1251,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "canCall",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1242,
                  "name": "src",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "771:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1241,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "771:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1244,
                  "name": "dst",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "784:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1243,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "784:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1246,
                  "name": "sig",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "797:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1245,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "770:38:8"
            },
            "returnParameters": {
              "id": 1250,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1249,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "856:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1248,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "856:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "855:6:8"
            },
            "scope": 1252,
            "src": "754:108:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1253,
        "src": "361:503:8"
      }
    ],
    "src": "0:866:8"
  },
  "legacyAST": {
    "absolutePath": "/home/ohm/dev/dsb/smart-contracts/contracts/interfaces/IGuard.sol",
    "exportedSymbols": {
      "IGuard": [
        1252
      ]
    },
    "id": 1253,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1240,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": "@notice Interface for a Guard contract. Guard implementations MUST return true if the given\naddress can perform a call on a function (as determined by the given callcode) in the given\ncontext (as determined by the `dst` contract address). The authentication process and logic are\nleft to the actual implementation.",
        "fullyImplemented": false,
        "id": 1252,
        "linearizedBaseContracts": [
          1252
        ],
        "name": "IGuard",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice canCall MUST return true if `src` can call `sig` in the context of\nthe `dst` contract.\n@param src The source (caller) address.\n@param dst The context (called contract) address.\n@param sig The function selector of the function being called on `dst`.\n@return True, if the call is allowed, false otherwise",
            "id": 1251,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "canCall",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1242,
                  "name": "src",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "771:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1241,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "771:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1244,
                  "name": "dst",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "784:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1243,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "784:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1246,
                  "name": "sig",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "797:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1245,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "770:38:8"
            },
            "returnParameters": {
              "id": 1250,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1249,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1251,
                  "src": "856:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1248,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "856:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "855:6:8"
            },
            "scope": 1252,
            "src": "754:108:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1253,
        "src": "361:503:8"
      }
    ],
    "src": "0:866:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.10+commit.5a6ea5b1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-17T01:13:52.679Z",
  "devdoc": {
    "methods": {
      "canCall(address,address,bytes4)": {
        "params": {
          "dst": "The context (called contract) address.",
          "sig": "The function selector of the function being called on `dst`.",
          "src": "The source (caller) address."
        },
        "return": "True, if the call is allowed, false otherwise"
      }
    }
  },
  "userdoc": {
    "methods": {
      "canCall(address,address,bytes4)": {
        "notice": "canCall MUST return true if `src` can call `sig` in the context of the `dst` contract."
      }
    },
    "notice": "Interface for a Guard contract. Guard implementations MUST return true if the given address can perform a call on a function (as determined by the given callcode) in the given context (as determined by the `dst` contract address). The authentication process and logic are left to the actual implementation."
  }
}